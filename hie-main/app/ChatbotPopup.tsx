import React, { useState } from "react";
import { View, Modal, TouchableOpacity, TextInput, StyleSheet, FlatList, Alert, Dimensions } from "react-native";
import { getFirestore, collection, addDoc, Timestamp } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { CustomText as Text } from "../components/CustomText";

const db = getFirestore();
const auth = getAuth();

export default function ChatbotPopup({ visible, onClose }: { visible: boolean; onClose: () => void }) {
  const [messages, setMessages] = useState<{ id: string; text: string; sender: "user" | "bot" }[]>([]);
  const [inputText, setInputText] = useState("");
  const [loading, setLoading] = useState(false);

  const sendMessage = async () => {
    if (!inputText.trim()) return;
    const userMessage = { id: Date.now().toString(), text: inputText, sender: "user" };
    setMessages((prev) => [...prev, userMessage]);

    try {
      const user = auth.currentUser;
      if (!user) throw new Error("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");

      await addDoc(collection(db, "chatbot_logs"), {
        userId: user.uid,
        message: inputText,
        timestamp: Timestamp.now(),
      });

      setInputText("");
      setLoading(true);
      handleBotResponse(inputText);
    } catch (error) {
      console.error("Î©îÏãúÏßÄ Ï†ÄÏû• Ïã§Ìå®:", error);
      Alert.alert("Ïò§Î•ò Î∞úÏÉù", "Î©îÏãúÏßÄÎ•º Ï†ÄÏû•Ìï† Ïàò ÏóÜÏäµÎãàÎã§.");
    }
  };

  const handleBotResponse = async (userInput: string) => {
    const lowerInput = userInput.toLowerCase();
    let botReply = "";

    if (lowerInput.includes("ÌóàÎ¶¨") && lowerInput.includes("ÏïÑÌåå")) {
      botReply = `ÌóàÎ¶¨ ÌÜµÏ¶ùÏù¥ ÏûàÏùÑ Îïå Ï∂îÏ≤úÎêòÎäî Ïö¥ÎèôÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§:\n\n‚úÖ Í≥†ÏñëÏù¥-ÏÜå ÏûêÏÑ∏ (Cat-Cow Stretch)\n‚úÖ Î¨¥Î¶é ÎãπÍ∏∞Í∏∞ (Knee to Chest Stretch)\n‚úÖ Î∏åÎ¶øÏßÄ Ïö¥Îèô (Glute Bridge)\n‚úÖ ÎàÑÏõåÏÑú Î¨¥Î¶é Ï¢åÏö∞Î°ú ÌùîÎì§Í∏∞\n\nÎòêÌïú, Ïö¥Îèô Ï†ÑÏóêÎäî Ï∂©Î∂ÑÌïú Ïä§Ìä∏Î†àÏπ≠Í≥º, ÌÜµÏ¶ùÏù¥ Ïã¨ÌïòÎ©¥ Î¨¥Î¶¨ÌïòÏßÄ ÏïäÍ≥† Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî.`;
    } else if (lowerInput.includes("ÏòÅÏñëÏ†ú") || lowerInput.includes("ÏùåÏãù") || lowerInput.includes("Î®πÏùÑ") || lowerInput.includes("Î≥¥Ï∂©")) {
      botReply = `ÌÜµÏ¶ùÏù¥ ÏûàÍ±∞ÎÇò Ïö¥Îèô ÌõÑ ÌöåÎ≥µÏùÑ ÎèïÍ∏∞ ÏúÑÌïú ÏùåÏãù/ÏòÅÏñëÏ†ú Ï∂îÏ≤úÏûÖÎãàÎã§:\n\nü•¶ ÏùåÏãù: Ïó∞Ïñ¥, Í≥†Íµ¨Îßà, Î∞îÎÇòÎÇò, ÏãúÍ∏àÏπò, ÏÇ∂ÏùÄ Îã¨Í±Ä, ÏïÑÎ≥¥Ïπ¥ÎèÑ\nüíä ÏòÅÏñëÏ†ú: Ïò§Î©îÍ∞Ä3, ÎßàÍ∑∏ÎÑ§Ïäò, ÎπÑÌÉÄÎØº D, Í∏ÄÎ£®ÏΩîÏÇ¨ÎØº\n\nÎã®, Í∞úÏù∏ ÏÉÅÌÉúÏóê Îî∞Îùº ÏÑ≠Ï∑® Ï†Ñ Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.`;
    } else {
      botReply = "Ï£ÑÏÜ°Ìï¥Ïöî! Îç∞Î™® Î™®ÎìúÏóêÏÑúÎäî 'ÌóàÎ¶¨Í∞Ä ÏïÑÌåå' ÎòêÎäî 'ÏùåÏãù/ÏòÅÏñëÏ†ú Ï∂îÏ≤ú' Í¥ÄÎ†® ÏßàÎ¨∏ÏóêÎßå ÏùëÎãµÌï¥Ïöî.";
    }

    setMessages((prev) => [...prev, { id: Date.now().toString(), text: botReply, sender: "bot" }]);
    setLoading(false);
  };

  return (
    <Modal visible={visible} transparent={true} animationType="slide" onRequestClose={onClose}>
      <View style={styles.overlay}>
        <View style={styles.chatContainer}>
          <TouchableOpacity style={styles.closeIcon} onPress={onClose}>
            <Text style={styles.closeButtonText}>‚úï</Text>
          </TouchableOpacity>
          <Text style={styles.title}>üèãÔ∏è Ïö¥Îèô Ï±óÎ¥á</Text>
          <FlatList
            data={messages}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <View style={[styles.messageBubble, item.sender === "user" ? styles.userBubble : styles.botBubble]}>
                <Text style={[styles.messageText, item.sender === "bot" && styles.botMessageText]}>{item.text}</Text>
              </View>
            )}
          />

          <View style={styles.inputContainer}>
            <TextInput
              style={styles.input}
              placeholder="Ïö¥Îèô Í¥ÄÎ†® ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
              value={inputText}
              onChangeText={setInputText}
            />
            <TouchableOpacity style={styles.sendButton} onPress={sendMessage} disabled={loading}>
              <Text style={styles.sendButtonText}>{loading ? "‚è≥" : "üì©"}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0,0,0,0.5)",
  },
  chatContainer: {
    width: "85%",
    height: "70%",
    backgroundColor: "rgba(255, 255, 255, 0.95)",
    padding: 16,
    borderRadius: 14,
    elevation: 10,
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 8,
    fontFamily: "GmarketSans",
  },
  inputContainer: {
    flexDirection: "row",
    marginTop: 10,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 5,
    padding: 10,
    fontFamily: "GmarketSans",
  },
  sendButton: {
    marginLeft: 10,
    padding: 10,
    backgroundColor: "#007AFF",
    borderRadius: 5,
  },
  sendButtonText: {
    color: "#fff",
    fontSize: 16,
    fontFamily: "GmarketSans",
  },
  closeIcon: {
    position: "absolute",
    top: 10,
    right: 10,
    zIndex: 10,
  },
  closeButtonText: {
    color: "#555",
    fontSize: 20,
    fontFamily: "GmarketSans",
  },
  messageBubble: {
    padding: 10,
    borderRadius: 10,
    marginVertical: 5,
    maxWidth: "80%",
  },
  userBubble: {
    alignSelf: "flex-end",
    backgroundColor: "#007AFF",
  },
  botBubble: {
    alignSelf: "flex-start",
    backgroundColor: "#fff",
  },
  messageText: {
    fontSize: 16,
    fontFamily: "GmarketSans",
    color: "#fff",
  },
  botMessageText: {
    color: "#000",
  },
});
